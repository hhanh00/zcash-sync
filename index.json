[{"uri":"https://hhanh00.github.io/zcash-sync/light_wallet/","title":"Light Wallets","tags":[],"description":"","content":"Light Wallets "},{"uri":"https://hhanh00.github.io/zcash-sync/light_wallet/purpose/","title":"Purpose","tags":[],"description":"","content":"The main purpose of a Light Wallet or any wallet for that matter is to provide:\n the capability to receive funds, the capability to send funds, and display the funds available  In addition, Light Wallet should be less resource-demanding than regular wallets. In the past, the latter term has been used to refer to full nodes.\nFull node wallets download the entire blockchain and keep a fairly extensive representation of the data within.\nAs of the time of writing (Sep 2022), the Zcash blockchain takes ~150 GB of storage space. It includes the Blockchain, and the database used to store the notes and transactions.\nAt the same time, a light wallet for Zcash \u0026ldquo;only\u0026rdquo; downloads 5 GB of data and keeps a few MB of storage.\nThis represents a gain of ~100X. They fit into mobile devices. They are particularly useful to the casual user.\nThe original bitcoin paper by Satoshi mentions the idea of light wallets. He refers to them as Simplified Payment Verification wallets (SPV).\n However, light wallets have also some disadvantages.\nThe fact that they do not download the full blockchain prevents them from validating its content and, consequently, from participating actively in the network. They must connect to light wallet servers that have processed the blockchain on their behalf. The wallets, however, need not fully trust the servers since another form of cryptographic validation is employed. A detailed description of the threat model for wallet apps can be found here: Wallet App Threat Model.\n"},{"uri":"https://hhanh00.github.io/zcash-sync/data_model/tables/","title":"Tables","tags":[],"description":"","content":"In the previous section, we discusses the overall goals of scanning the blockchain. Now we are going to look at the data obtained after the scan completes.\nFrom the \u0026ldquo;largest\u0026rdquo; data to the \u0026ldquo;smallest\u0026rdquo; data:\nBlocks First we have blocks. We keep the block:\n height, hash and time, sapling tree  The sapling tree field is unique to Zcash. The wallet needs it to update the note witnesses.\nTransactions The wallet only keeps the transactions for which it has detected either an incoming note or a spent note. Transparent transactions are not kept. They are not included in the wallet history either.\n id_tx: the id of the transactions. This is an internal ID only used by in our database. the account id the txid: the hash of the transaction. That\u0026rsquo;s public information the height of the block that contains this transaction. Since there can only be one block at a given height, it uniquely identifies the block too the net value of the transaction in Zats the address of the spend/destination. For transactions that involve multiple recipients that we know about, the address is arbitrary one of them. For example, if you make a transaction from your account to several of your own accounts, there will be one transaction row per account, but the destination address will just be one of the recipients the memo of one of the notes. If you make a multi-payment transaction, only one of the memos will be stored the tx_index: the position of the transaction in the block  Multi-payment transactions are rare. That\u0026rsquo;s why the database model does not match directly with the UTXO model. Technically speaking, every UTXO has its own address and memo.\n The Transaction table is only used for the Transaction History view. It is not used for calculating the balance or for building new transactions. In other words, it\u0026rsquo;s purely informational.\nReceived Notes On the contrary, the Received Notes table plays a critical role in defining the account state.\nThe Received Notes table has the following columns:\n id_note: The primary key of the table account: the account ID to which this note belongs position: the absolute position of the note in the overall commitment tree. The first shielded output has position 0 and every output (regardless of its owner) increments the position. The order is determined by the order in which the output appeared in the blockchain. Unconfirmed transactions do not have a position tx: the id of the transaction (not the tx hash) height: the height of the block (same as tx height), output_index: A transaction can have multiple outputs. This is the index of the received note inside the transaction diversifier: Once decoded, we know the diversifier value that was used to derive the address. In zcash, a secret key can generate millions of addresses though many wallets just use one of them value: the amount of the note in Zats rcm: the random value used by sender when generating the output note. nf: the note nullifier. We calculate this value from the note position and the full viewing key. The note nullifier is not known by the sender spent: the block height when the note is spent. If the note is unspent, spent is NULL. If the note is spent but unconfirmed, height is equal to 0 excluded: a boolean flag that indicates if this note should be excluded from note selection when make a new payment  The Received Notes table allows us to:\n compute the account balances by summing the value of unspent notes, find which notes can be spent in new transactions rollback the blockchain when there is a reorganization  Witnesses  "},{"uri":"https://hhanh00.github.io/zcash-sync/","title":"WarpSync","tags":[],"description":"","content":"WARP SYNC "},{"uri":"https://hhanh00.github.io/zcash-sync/data_model/","title":"Data Model","tags":[],"description":"","content":"Data Model "},{"uri":"https://hhanh00.github.io/zcash-sync/light_wallet/privacy/","title":"Privacy","tags":[],"description":"","content":"Non-private coins make up the vast majority of wallets. Almost all cryptocurrency users rely on them. As a result, they have come to expect a certain level of functionality and speed.\nBut private coins present significant challenges that non-private coins do not have. Because the content of the blockchain is hidden or encrypted, third party services cannot index the transactions and maintain address balances in advance.\nImagine having a dictionary where every word and definition is redacted. It would be impossible to sort the definitions by alphabetical order. Even though with zero knowledge technology, the node validators can ensure that the transaction are valid, they cannot decode the amounts and addresses of the shielded transactions.\nToday and until further progress in cryptography is made, we are presented with a dilemna:\n Either transactions are public and wallets are fast, OR transactions are hidden but wallets are slower.  This is not at all specific to zcash. Every private cryptocurrency has the same issue.\nFor private coins, wallets have to scan the blockchain to find their transactions. But for public coins, wallets can consult a server that has scanned for them.\n Arguably, if you are not concerned with privacy, you could send your decryption key to a server and have it scan for you. But obviously, you need to trust that server to keep your information private.\nZcash light wallets do not transmit the decryption key to a third party service and perform the decryption themselves.\n "},{"uri":"https://hhanh00.github.io/zcash-sync/light_wallet/utxo/","title":"UTXO Model","tags":[],"description":"","content":"Zcash is a Blockchain that uses the UTXO model first introduced in Bitcoin.\nUTXO Initially, every account/address has an empty balance. The only way to get coins into an account is through a transaction (TX).\nTransactions take inputs and produce outputs. Except for the mining transaction called the coinbase transaction, every transaction has inputs that fund the outputs.\nWe\u0026rsquo;ll not consider mining or minting and therefore we\u0026rsquo;ll ignore the coinbase transaction.\nNotes Inputs and outputs are notes. They have an amount and belong to an address. The address is associated with a secret key that let\u0026rsquo;s you use the note as an input of a transaction. If you do not have the secret key, you cannot to spend the output.\nFor public coins, notes are in clear text. By analyzing the blockchain, one can calculate the balance of every address in use. They just need to tally every incoming note and deduct every spent note.\nHowever, Zcash has both public and private notes. Public notes behave exactly like explained above but private notes are encrypted.\nEncrypted notes also have an amount and an address but this information is not readable unless you have a viewing key.\nWithout the right viewing key, an encrypted note appears as random bytes. Encrypted notes are also called shielded notes.\n It may be worth remembering that a note belong to a single address but an address may own any number of notes.\nUnspent Transaction Outputs (UTXO) UTXO are the notes that haven\u0026rsquo;t been spent yet.\nTheir total is the amount of coins in circulation. The UTXO for which you have the secret key are the funds you can spend.\nTherefore it is very important that your wallet keeps track of all the UTXO you can spend.\nThe only way to know which UTXO are yours is to scan the blockchain and look at every transaction inputs and outputs.\nTransparent UTXO If the UTXO belong to a transparent address, a wallet can leverage an external service, for example a block explorer, and delegate the scan. The service can scan the Blockchain once and track every transparent UTXO in a database.\nZcashd can index every transaction and keep a track of every transparent address ever used.\n This requires address storage and processing power, therefore zcashd needs to run with the txindex=1 option.\nShielded UTXO Shielded UTXO cannot be indexed by an external service or by zcashd. zcashd knows about your shielded UTXO but it cannot possibly decrypt other users' encrypted notes.\nTherefore, your wallet must scan the blockchain itself.\nTo determine the balance of your shielded address, your wallet MUST scan the blockchain.\n "},{"uri":"https://hhanh00.github.io/zcash-sync/light_wallet/scan/","title":"Scan / Sync","tags":[],"description":"","content":"Scanning the blockchain can be done in several ways. Ultimately they all achieve the same goal:\n Determine which notes you received, ie adding incoming funds, Cross-out the notes you spent, ie substracting outgoing funds, And finally, allowing you to spend your UTXO.  The first two bullet points are typical of any UTXO based cryptocurrency wallet, but the last bullet point may be unusual.\nOnce the blockchain scan finishes, your wallet is said to be synchronized.\n In most cryptocurrencies, as long as you have the secret key and a reference to the UTXO, you can spend it.\nThis is not the case of Zcash.\nTo spend a shielded UTXO, your wallet must also keep track of a value called the \u0026ldquo;witness\u0026rdquo; specific to a given note and block height. In other words, every note has a witness which is a several hundred byte long that changes every time we get a new block.\nWhen the wallet wants to spend a note, it needs to compute a \u0026ldquo;proof\u0026rdquo; of validity called a zero knowledge proof (ZKP). The ZKP ensures that we have the secret key and the reference to the UTXO without actually disclosing this information.\nZKP Creation Function One of the argument of the ZKP creation function is the witness. Therefore, if you want to spend a note, the wallet needs to compute its witness at a given height.\nWallets are not obligated to provide the latest witnesses. But since the height is public information, if a wallet does not update the witnesses it would be possible to gain some knowledge by looking at the witness heights of a transaction.\nIf a wallet does not update the note witnesses, one can check the height when a note is spent and deduce when it was received.\n Nullifiers In Bitcoin, to spend a UTXO, a wallet simply has to refer to it and attach a digital signature proving it knows the secret key.\nIn Zcash, UTXO are encrypted. But that\u0026rsquo;s not enough. Spending a UTXO must also be hidden. If Zcash transactions referred to UTXO like Bitcoin does, one could know when the UTXO was created. Therefore even if it would be impossible to know the values and addresses of the notes, it would be possible to link notes with transactions.\nTo avoid this, Zcash transactions do not directly refer to UTXO but they refer to a nullifier instead.\nNullifiers are unique values associated with a note. Only the receiver of the note can create the nullifier and it\u0026rsquo;s impossible to make a nullifier for a note that does not exist. The exact mechanism used to achieve this is beyond the scope of this document.\nEach UTXO has a unique nullifier. Nullifiers cannot be faked: Anyone can verify that a nullifier is associated with a real UTXO.\n Scan Outputs In conclusion, let\u0026rsquo;s review what a scan must do:\n It must scan each transaction and try to decrypt its outputs. Successful decryptions generate \u0026ldquo;received notes\u0026rdquo; (fresh UTXO). For each received note, the wallet can calculate its nullifier. Spent notes are detected when their nullifier is used in a later transaction. For each UTXO, the wallet maintains a witness that it should keep updating.  "},{"uri":"https://hhanh00.github.io/zcash-sync/light_wallet/reorg/","title":"Reorganization","tags":[],"description":"","content":"Reorganizations happen when several miners submit different blocks at the same height.\nIt is a rare occurence but it happens.\nFor example, if you have the following situation:\n Miner A submits block 1001 after block 1000 Miner B submits a different block 1001 Miner C submits a block 1002 based on miner B\u0026rsquo;s block 1001  Now we have two chains that deviate at block 1000:\n one built from Miner A\u0026rsquo;s block 1001 the other from Miner B\u0026rsquo;s block 1001 and Miner C\u0026rsquo;s 1002  Since nodes cannot determine a-priori which chains will get longer after seeing block 1001, some of them first follow Miner A while others follow Miner B.\nBut when Miner C produces block 1002, Miner B\u0026rsquo;s chain is now longer than Miner A\u0026rsquo;s.\nNodes have to follow the longest chain.\n "},{"uri":"https://hhanh00.github.io/zcash-sync/categories/","title":"Categories","tags":[],"description":"","content":""},{"uri":"https://hhanh00.github.io/zcash-sync/tags/","title":"Tags","tags":[],"description":"","content":""}]