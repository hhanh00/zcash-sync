<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Developer on Zcash Warp Sync</title><link>https://hhanh00.github.io/zcash-sync/developer/</link><description>Recent content in Developer on Zcash Warp Sync</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://hhanh00.github.io/zcash-sync/developer/index.xml" rel="self" type="application/rss+xml"/><item><title>RPC</title><link>https://hhanh00.github.io/zcash-sync/developer/rpc/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hhanh00.github.io/zcash-sync/developer/rpc/</guid><description>There are several ways to use a warp sync in your project.
The simplest way is to go through the RPC API. Install and use warp sync as a server or a microservice for synchronization and account maintenance.
In this case, you should use the REST API published on SwaggerHub . It is also available here in the section REST API.
Build First of all, you have to compile the server with cargo.</description></item><item><title>REST API</title><link>https://hhanh00.github.io/zcash-sync/developer/rest/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hhanh00.github.io/zcash-sync/developer/rest/</guid><description/></item><item><title>Database</title><link>https://hhanh00.github.io/zcash-sync/developer/database/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hhanh00.github.io/zcash-sync/developer/database/</guid><description>You can also directly query the database if you just want to leverage WarpSync for synchronization but you want to implement the wallet logic yourself.
Warning In this workflow, you must only query the database and never update it.
You should use the REST API to manage accounts and perform synchronization.
Then you can query the tables accounts, received_notes and transactions.
Accounts CREATE TABLE IF NOT EXISTS accounts ( id_account INTEGER PRIMARY KEY, name TEXT NOT NULL, seed TEXT, aindex INTEGER NOT NULL, sk TEXT, ivk TEXT NOT NULL UNIQUE, address TEXT NOT NULL) seed: account passphrase.</description></item><item><title>FFI</title><link>https://hhanh00.github.io/zcash-sync/developer/ffi/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hhanh00.github.io/zcash-sync/developer/ffi/</guid><description>You can build the Warp Sync library as a dynamic library and use it from your code as long as it supports interfacing with native code.
Most programming languages have the ability to call into C code. Therefore, you should be able to use FFI (Foreign Function Interface).
In this section, we&amp;rsquo;ll describe the low-level C API.
Build First edit the file Cargo.toml and change the library type from rlib to cdylib Then compile: cargo b -r --features=dart_ffi This should create a dynamic library in the target/release directory.</description></item><item><title>Java</title><link>https://hhanh00.github.io/zcash-sync/developer/java/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hhanh00.github.io/zcash-sync/developer/java/</guid><description>Example using Java Checkout the integrations/java directory for an example of how to use JAVA with Warp Sync to create a new account and query the seed phrase and address.
Main class package app.ywallet; import java.sql.*; /** */ public class App { static { System.loadLibrary(&amp;#34;java_warp&amp;#34;); } public static void main( String[] args ) throws Exception { Class.forName(&amp;#34;org.sqlite.JDBC&amp;#34;); final App app = new App(); // Create a new account final int id = app.</description></item><item><title>Rust</title><link>https://hhanh00.github.io/zcash-sync/developer/rust/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hhanh00.github.io/zcash-sync/developer/rust/</guid><description>Documentation The API has its own documentation pages.
Example using Rust Checkout the integrations/rust directory for an example of how to use JAVA with Warp Sync to create a new account and query the seed phrase and address.
use warp_api_ffi::api::account::{get_backup, new_account}; use warp_api_ffi::api::sync::coin_sync; use warp_api_ffi::{CoinConfig, init_coin, set_coin_lwd_url}; use lazy_static::lazy_static; use std::sync::Mutex; lazy_static! { static ref CANCEL: Mutex&amp;lt;bool&amp;gt; = Mutex::new(false); } const FVK: &amp;amp;str = &amp;#34;zxviews1q0duytgcqqqqpqre26wkl45gvwwwd706xw608hucmvfalr759ejwf7qshjf5r9aa7323zulvz6plhttp5mltqcgs9t039cx2d09mgq05ts63n8u35hyv6h9nc9ctqqtue2u7cer2mqegunuulq2luhq3ywjcz35yyljewa4mgkgjzyfwh6fr6jd0dzd44ghk0nxdv2hnv4j5nxfwv24rwdmgllhe0p8568sgqt9ckt02v2kxf5ahtql6s0ltjpkckw8gtymxtxuu9gcr0swvz&amp;#34;; #[tokio::main] async fn main() { env_logger::init(); // Initialize the library for Zcash (coin = 0) init_coin(0, &amp;#34;.</description></item></channel></rss>